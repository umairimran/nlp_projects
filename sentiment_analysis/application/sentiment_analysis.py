# -*- coding: utf-8 -*-
"""Sentiment_analysis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1DKmLbSOQLHH7HsF22duMrhSEdmRY8GnB
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import plotly.express as px
import re
import nltk
from nltk.corpus import stopwords
from nltk.stem import PorterStemmer
from nltk.tokenize import word_tokenize
import string
from gensim.models.word2vec import Word2Vec
from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split
from sklearn.naive_bayes import GaussianNB
from sklearn.metrics import accuracy_score, classification_report
nltk.download('stopwords')
nltk.download('punkt_tab')

df=pd.read_csv("/content/twitter_training.csv")
df.head()

df.value_counts().sum()

"""Data Preprocessing"""

df.columns=['id','label','sentiment','text']

df.drop(columns=['id','label'],inplace=True)

df.head()

print(df.dtypes)

negative_df=df[(df['sentiment']=='Negative')]
positive_df=df[df['sentiment']=='Positive']
neutral_df=df[df['sentiment']=='Neutral']

negative_df.value_counts().sum()

classes=pd.DataFrame(df.groupby('sentiment').size().reset_index(name='count'))
display(classes)
print(classes.columns)

fig=px.bar(classes,x='sentiment',y='count',title='Sentiment Analysis')
fig.show()

def preprocess_text(text):
    text = str(text)
    stop_words = set(stopwords.words('english'))
    stemmer = PorterStemmer()
    text = text.lower()
    url_pattern = re.compile(r'https?://\S+|www\.\S+')
    text = url_pattern.sub(' ', text)
    text = re.sub(r'<.*?>', '', text)
    text = re.sub(r'[^a-zA-Z0-9\s]', '', text)
    text = re.sub(r'\s+', ' ', text).strip()
    filtered_words = [word for word in text.split() if word not in stop_words]
    contractions = r"(\b(?:U\.S|Dr|Mrs|Mr|i\.e|e\.g)\.|\b(?:I'm|you're|they're|it's|doesn't|didn't)\b)"
    text = re.sub(contractions, lambda x: x.group(0).replace('.', '<PERIOD>'), text)
    text = text.translate(str.maketrans('', '', string.punctuation))
    text = text.replace('<PERIOD>', '.')
    tokens = word_tokenize(text)

    stemmed_words = [stemmer.stem(word) for word in filtered_words]

    return ' '.join(stemmed_words)

df['text']=df['text'].apply(preprocess_text)

df=df[df['sentiment']!='Irrelevant']

## word embeddings using word2vec
tokenized_sentences=[sentence.split() for sentence in df['text']]
model=Word2Vec(
    tokenized_sentences,
    vector_size=124,
    window=3,
    min_count=1,
    sg=0,
    hs=0,
    negative=3,

    seed=42
)
model.save('word2vec.model')

vector=model.wv['game']
print(vector)

def get_sentence_embedding(sentence):
    words=sentence.split()
    embeddings=[]
    # Access word vectors using model.wv[word]
    word_vectors=[model.wv[word] for word in words if word in model.wv]
    if len(word_vectors)>0:
        sentence_embedding=np.mean(word_vectors,axis=0)
    else:
        sentence_embedding=np.zeros(model.vector_size)
    return sentence_embedding

df['embedded'] = df['text'].apply(get_sentence_embedding)
df

sentiment_mapping = {'Positive': 1, 'Negative': -1, 'Neutral': 0}
df['sentiment_encoded'] = df['sentiment'].map(sentiment_mapping)

x=df['embedded']
y=df['sentiment_encoded']
X_train,X_test,y_train,y_test=train_test_split(x,y,test_size=0.2,random_state=42)



X=df['embedded'].to_numpy()
X = np.vstack(X)  # Reshape X into a 2D array
y=df['sentiment']
X_train,X_test,y_train,y_test=train_test_split(
    X,y,test_size=0.4,random_state=42
)
logistic_model=LogisticRegression()
logistic_model.fit(X_train,y_train)
y_pred=logistic_model.predict(X_test)
accuracy=accuracy_score(y_test,y_pred)
print(f"Accuracy:{accuracy}")

def get_sentence_embedding(sentence):
    words=sentence.split()
    word2vec='word2vec.model'
    # Access word vectors using model.wv[word]
    word_vectors=[model.wv[word] for word in words if word in model.wv]
    if len(word_vectors)>0:
        sentence_embedding=np.mean(word_vectors,axis=0)
    else:
        sentence_embedding=np.zeros(model.vector_size)
    return sentence_embedding
def predict_sentiment(model,sentence):
    import joblib
    loaded_model = joblib.load('logistic_model.pkl')
    sentence=preprocess_text(sentence)
    print(sentence)
    sentence_embedding=get_sentence_embedding(sentence)
    sentence_embedding=sentence_embedding.reshape(1,-1)
    sentiment=model.predict(sentence_embedding)
    return sentiment[0]

predict_sentiment(logistic_model,"Rocket League, Sea of Thieves or Rainbow Six: SiegeðŸ¤”? I love playing all three on stream but which is the best? #stream #twitch #RocketLeague #SeaOfThieves #RainbowSixSiege #follow")

